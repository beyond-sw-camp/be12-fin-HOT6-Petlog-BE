
management:
  endpoints:
    web:
      exposure:
        include: health
    endpoint:
      health:
        show-details: always
    health:
     db:
      enabled: true
spring:
#  datasource:
#    master:
#      url: jdbc:mariadb://${MASTER_DB_HOST}:${MASTER_DB_PORT}/${MASTER_DB_NAME}?useUnicode=true&characterEncoding=utf8mb4&connectionCollation=utf8mb4_general_ci&serverTimezone=Asia/Seoul
#      driver-class-name: org.mariadb.jdbc.Driver
#      username: ${MASTER_DB_USERNAME}
#      password: ${MASTER_DB_PASSWORD}
#    slave:
#      url: jdbc:mariadb://${SLAVE_DB_HOST}:${SLAVE_DB_PORT}/${SLAVE_DB_NAME}?useUnicode=true&characterEncoding=utf8mb4&connectionCollation=utf8mb4_general_ci&serverTimezone=Asia/Seoul
#      driver-class-name: org.mariadb.jdbc.Driver
#      username: ${SLAVE_DB_USERNAME}
#      password: ${SLAVE_DB_PASSWORD}
  datasource:
    url: jdbc:mariadb://${DB_HOST}:${DB_PORT}/${DB_NAME}?useUnicode=true&characterEncoding=utf8mb4&connectionCollation=utf8mb4_general_ci&serverTimezone=Asia/Seoul
    driver-class-name: org.mariadb.jdbc.Driver
    username: ${DB_ID}
    password: ${DB_PASSWORD}
  data:
    mongodb:
      uri: mongodb://${MONGO_DB_HOST}:${MONGO_DB_PORT}/${MONGO_DB}

  jpa:
    defer-datasource-initialization: true
    database-platform: org.hibernate.dialect.MariaDBDialect
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        connection:
          useUnicode: true
          characterEncoding: UTF-8
  sql:
    init:
      mode: always
  kafka:
    bootstrap-servers: localhost:9092,localhost:9093,localhost:9094
    consumer:
      group-id: chat-server-${SERVER_ID}
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: '*'
        spring.json.use.type.headers: false
        spring.json.value.default.type: com.hot6.backend.chat.model.ChatDto$ChatMessageDto
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    listener:
      missing-topics-fatal: false
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB

  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY}
        secret-key: ${AWS_SECRET_KEY}
      region:
        static: ${AWS_REGION}
      s3:
        bucket: ${S3_BUCKET_NAME}

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            redirect-uri: ${KAKAO_REDIRECT_URI}
            authorization-grant-type: authorization_code
            client-authentication-method: none
            client-name: Kakao
            scope:
              - profile_nickname
              - profile_image
              - account_email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_ADDR}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          starttls:
            enable: true
            required: true
          auth: true
          timeout: 5000

jwt:
  secret: ${JWT_SECRET}
  expired: ${JWT_EXPIRED}

project:
  upload:
    path: C:/Users/Playdata/Desktop/pdh

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

openai:
  api:
    key: ${OPENAI_API_KEY}

profile-image: ${PROFILE_IMAGE}
pet-image: ${PET_IMAGE}
email-auth-url: ${EMAIL_URL}
frontend-server: ${FE_SERVER}
kakao-admin-key: ${KAKAO_ADMIN_KEY}
